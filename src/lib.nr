fn main() -> pub u32 {
    let mut slice: [Field] = &[0; 2];

    let mut new_slice = slice.push_back(6);
    new_slice.len()
}


#[test]
fn smoke_test() {
    assert(true);
}

// This is an example benchmark.
// Changes to the number of constraints generated by this function will show in PRs.
// #[export]
// fn bench_test(mut x: Field) -> Field {
//     for _ in 0..100 {
//         x *= x;
//     }
//     x
// }

// This is an example prop test harness.
// #[export]
// fn prop_mul(a: Field, b: Field) -> Field {
//     a * b
// }
